<#@ Template Language="C#" HostSpecific="True"  #>
<#@ Output Extension="cs" #>
<#@ include file="Imports.include.t4" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.ModelBinding;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data.Entity;
using Microsoft.AspNet.FriendlyUrls.ModelBinding;
using Microsoft.AspNet.FriendlyUrls;
using System.Web.DynamicData;
using <#=DefaultNamespace #>.Repositories;
using <#=DefaultNamespace #>.Extensions;
using Microsoft.Practices.Unity;
using Repository.Pattern.UnitOfWork;
using <#=DefaultNamespace #>.Services;

<# if(!string.IsNullOrEmpty(ModelNamespace)) { #>
using <#= ModelNamespace #>;
<# } #>
<# if(!string.IsNullOrEmpty(DbContextNamespace) && (DbContextNamespace != ModelNamespace)) { #>
using <#= DbContextNamespace #>;
<# } #>


<# PropertyMetadata primaryKey = ModelMetadata.PrimaryKeys.FirstOrDefault(); #>

namespace <#= FolderNamespace #>
{
    public partial class Edit : System.Web.UI.Page
    {
		 
        [Dependency]
        protected IUnitOfWorkAsync _unitofwork { get; set; }
        [Dependency]
        protected I<#= ModelName #>Service _<#= ModelName.ToLower() #>Service { get; set; }
        protected void Page_Init()
        {
            //TODO:添加页面标题
            this.Title = "<#= PluralizedModelName #>";
            <#= ModelName #>FormView.RedirectToRouteOnItemInserted("../Default");
            <#= ModelName #>FormView.RedirectToRouteOnItemUpdated("../Default");
            <#= ModelName #>FormView.RedirectToRouteOnItemDeleted("../Default");
            <#= ModelName #>FormView.RedirectToRouteOnItemCommad("../Default");
        }
        protected void Page_Load(object sender, EventArgs e)
        {
          
        }
        #region 主菜单操作事件
        //TODO:完成编辑GridView选中的记录
        protected void editbtn_Click(object sender, EventArgs e)
        {

        }
        //TODO:完成删除GridView选中的记录
        protected void deletebtn_Click(object sender, EventArgs e)
        {
            var id = Request.GetFriendlyUrlSegments()[0];
            _<#= ModelName.ToLower() #>Service.Delete(id);
            _unitofwork.SaveChanges();
        }
        //TODO:完成通过搜索关键字查询
        protected void searchbtn_Click(object sender, EventArgs e)
        {
            
        }
        #endregion
         public <#= ModelName #> Get<#= ModelName #>ById([FriendlyUrlSegmentsAttribute(0)]<#= primaryKey.ShortTypeName #> id)
        {
            return _<#= ModelName.ToLower() #>Service.Find(id);
        }
        public void Update<#= ModelName #>(<#= primaryKey.ShortTypeName #> <#= PrimaryKeyName.ToLower() #>)
        {
            var item = _<#= ModelName.ToLower() #>Service.Find(<#= PrimaryKeyName.ToLower() #>);
            if (this.TryUpdateModel(item))
            {
                _unitofwork.SaveChanges();
            }
        }



        #region tabs GridView Load明细表数据
         <#
		foreach (PropertyMetadata property in ModelMetadata.Properties) 
        {     
            if (property.AssociationDirection == AssociationDirection.OneToMany  ) 
            {
                  PropertyMetadata subprimaryKey = OneToManyModels[property.PropertyName].PrimaryKeys.FirstOrDefault();
        #>
        //TODO:根据外键获取<#= property.PropertyName #>明细表数据
        public IQueryable<<#= property.RelatedModel.ShortTypeName #>>   Get<#= property.PropertyName #>By<#= ModelName #>Id(string sortByExpression, int maximumRows, int startRowIndex, out int totalRowCount, [FriendlyUrlSegmentsAttribute(0)]<#= primaryKey.ShortTypeName #>  id)
        {
            sortByExpression=string.IsNullOrEmpty(sortByExpression)==true?"<#=  subprimaryKey.PropertyName #>":sortByExpression;
            var query = _<#= ModelName.ToLower() #>Service.Get<#= property.PropertyName #>(id).AsQueryable().OrderByField(sortByExpression);
            totalRowCount = query.Count();
            query = query
                    .Skip(startRowIndex)
                    .Take(maximumRows);
            return query;
        }
        <#
            }
        }
        #> 
        #endregion
        



        #region 子表GridView，FormView事件
		<#
            foreach (PropertyMetadata property in ModelMetadata.Properties) 
            {
                if ( property.AssociationDirection == AssociationDirection.OneToMany && OneToManyModels.ContainsKey(property.PropertyName))
                {
                    ModelMetadata metamodel = OneToManyModels[property.PropertyName];
                    var _foreignKeyPropertyName = GetForeignKeyPropertyName(metamodel , ModelName );
                    PropertyMetadata subprimaryKey = OneToManyModels[property.PropertyName].PrimaryKeys.FirstOrDefault();
        #>
        #region sub<#= property.ShortTypeName #>GridView
        //TODO:当明细GridView单击命令行触发事件，如编辑当前行数据时弹出编辑页面
		protected void sub<#= property.ShortTypeName #>GridView_RowCommand(object sender, GridViewCommandEventArgs e)
        {
			if (e.CommandName == "EditRow")
            {
                var <#= subprimaryKey.PropertyName.ToLower() #> = Convert.ToInt32(e.CommandArgument);
				CurrentSub<#= property.ShortTypeName #>IdField.Value = <#= subprimaryKey.PropertyName.ToLower() #>.ToString();
				popup<#= property.ShortTypeName #>FormView.ChangeMode(FormViewMode.Edit);
                this.ClientScript.RegisterStartupScript(this.GetType(), "showPopup<#= property.PropertyName #>", "showPopup<#= property.PropertyName #>();",true);
                popup<#= property.ShortTypeName #>FormView.DataBind();
				//TODO:popupEdit Modal
			}
        }
        //TODO:单击新增子表记录时触发弹出新增页面     
        protected void addSub<#= property.ShortTypeName #>Btn_Click(object sender, EventArgs e)
        {
            popup<#= property.ShortTypeName #>FormView.ChangeMode(FormViewMode.Insert);
            //需要初始化外键值=主formview的ID
            var <#= PrimaryKeyName.ToLower() #> = <#= ModelName #>FormView.DataKey.Value.ToString();
            var sub<#= _foreignKeyPropertyName #>Control=(System.Web.UI.WebControls.HiddenField)popup<#= property.ShortTypeName #>FormView.FindDynamicFieldControl("<#= _foreignKeyPropertyName #>");
            
            //TODO:设定<#= property.ShortTypeName #>关联外键的初始化值
            if(sub<#= _foreignKeyPropertyName #>Control!=null){
                sub<#= _foreignKeyPropertyName #>Control.Value=  <#= PrimaryKeyName.ToLower() #>;
            }
            
            this.ClientScript.RegisterStartupScript(this.GetType(), "showPopup<#= property.PropertyName #>", "showPopup<#= property.PropertyName #>();",true);
        }
        
        #region 弹出子窗体popup<#= property.ShortTypeName #>FormView 新增，修改查询
        //TODO:当弹出子表体编辑Form时，绑定当前编辑的数据
		public <#= property.ShortTypeName #> GetSub<#= property.ShortTypeName #>ById([System.Web.ModelBinding.Control("CurrentSub<#= property.ShortTypeName #>IdField")] <#= subprimaryKey.ShortTypeName #> <#= subprimaryKey.PropertyName.ToLower() #>)
		{
            var _<#= property.RelatedModel.ShortTypeName.ToLower() #>Repository = _unitofwork.Repository<<#= property.ShortTypeName #>>();
			return _<#= property.RelatedModel.ShortTypeName.ToLower() #>Repository.Find(<#= subprimaryKey.PropertyName.ToLower() #>);
		}
        //TODO:新增子表体数据，保存到数据库
		public void Create<#= property.ShortTypeName #>RowItem(<#= property.ShortTypeName #> item)
        {
            //获取主formview绑定的数据
			//var <#= ModelName.ToLower() #> = this.<#= ModelName #>FormView.ExtractEntityValues(typeof(<#= ModelName #>));
            //获取主formview绑定Id
            //var <#= ModelName.ToLower() #>Id  = this.<#= ModelName #>FormView.DataKey.Value;
            //TODO:给子表附关联外键的值
            //item.<#= _foreignKeyPropertyName  #> = <#= ModelName.ToLower() #>Id;
            var _<#= property.RelatedModel.ShortTypeName.ToLower() #>Repository = _unitofwork.Repository<<#= property.ShortTypeName #>>();
            TryUpdateModel(item);
            if (!ModelState.IsValid)
            {
                //model is in an invalid state - stop all operations
                return;
            }else{
                _<#= property.RelatedModel.ShortTypeName.ToLower() #>Repository.Insert(item);
                _unitofwork.SaveChanges();

 
            }
        }
        //TODO:更新子表体数据，保存到数据库
		public void Update<#= property.ShortTypeName #>RowItem(<#= property.ShortTypeName #> item)
        {
            var _<#= property.RelatedModel.ShortTypeName.ToLower() #>Repository = _unitofwork.Repository<<#= property.ShortTypeName #>>();
			TryUpdateModel(item);
            if (!ModelState.IsValid)
            {
                //model is in an invalid state - stop all operations
                return;
            }else{
                _<#= property.RelatedModel.ShortTypeName.ToLower() #>Repository.Update(item);
                _unitofwork.SaveChanges();
            }
        }
        //TODO:删除子表体数据，保存到数据库
		public  void Delete<#= property.ShortTypeName #>RowItem(<#= subprimaryKey.ShortTypeName #> <#= subprimaryKey.PropertyName.ToLower() #>)
        {
            var _<#= property.RelatedModel.ShortTypeName.ToLower() #>Repository = _unitofwork.Repository<<#= property.ShortTypeName #>>();
                _<#= property.RelatedModel.ShortTypeName.ToLower() #>Repository.Delete(<#= subprimaryKey.PropertyName.ToLower() #>);
                _unitofwork.SaveChanges();
            
        }
        #endregion
        
		#endregion




 <#
                }
            }
            #>
        #endregion
         
            
 
    }
}



<#@ include file="ModelMetadataFunctions.cs.include.t4" #>