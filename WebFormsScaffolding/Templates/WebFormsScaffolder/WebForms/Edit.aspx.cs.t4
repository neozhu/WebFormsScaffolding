<#@ Template Language="C#" HostSpecific="True"  #>
<#@ Output Extension="cs" #>
<#@ include file="Imports.include.t4" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.ModelBinding;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data.Entity;
using Microsoft.AspNet.FriendlyUrls.ModelBinding;
using System.Web.DynamicData;
using <#=DefaultNamespace #>.Repositories.<#= PluralizedModelName.Replace("_","") #>;
using <#=DefaultNamespace #>.Extensions;
<# if(!string.IsNullOrEmpty(ModelNamespace)) { #>
using <#= ModelNamespace #>;
<# } #>
<# if(!string.IsNullOrEmpty(DbContextNamespace) && (DbContextNamespace != ModelNamespace)) { #>
using <#= DbContextNamespace #>;
<# } #>
namespace <#= FolderNamespace #>
{
    public partial class Edit : System.Web.UI.Page
    {
		protected <#=DbContextTypeName#> _db = new <#=DbContextTypeName#>();
        protected readonly <#= ModelName #>Repository _repository =
            new <#= ModelName #>Repository(new <#=DbContextTypeName #>());

        protected void Page_Init()
        {
            //TODO:添加页面标题
            this.Title = "<#= ModelName #>";
            <#= ModelName #>FormView.SetDataMethodsObject(_repository);
            <#= ModelName #>FormView.RedirectToRouteOnItemInserted("../Default");
            <#= ModelName #>FormView.RedirectToRouteOnItemUpdated("../Default");
            <#= ModelName #>FormView.RedirectToRouteOnItemDeleted("../Default");
            <#= ModelName #>FormView.RedirectToRouteOnItemCommad("../Default");
        }
        protected void Page_Load(object sender, EventArgs e)
        {
          
        }
        
        //TODO:完成编辑GridView选中的记录
        protected void editbtn_Click(object sender, EventArgs e)
        {

        }
        //TODO:完成删除GridView选中的记录
        protected void deletebtn_Click(object sender, EventArgs e)
        {
          
        }
        //TODO:完成通过搜索关键字查询
        protected void searchbtn_Click(object sender, EventArgs e)
        {
            
        }
        <#
		foreach (KeyValuePair<string,string > keyval in OneToManyNames) {     
        #>
        //TODO:根据外键获取<#= keyval.Key #>明细表数据
        public IQueryable<<#= keyval.Value #>> Get<#= keyval.Key #>By<#= ModelName #>Id(string sortByExpression, int maximumRows, int startRowIndex, out int totalRowCount, [FriendlyUrlSegmentsAttribute(0)]int? Id)
        {
                throw new NotImplementedException();
        }
		

        <#
		}
        #>

		<#
            foreach (PropertyMetadata property in ModelMetadata.Properties) 
            {
                if ( property.AssociationDirection == AssociationDirection.OneToMany && OneToManyModels.ContainsKey(property.PropertyName))
                {
        #>
        //TODO:当明细GridView单击命令行触发事件，如编辑当前行数据时弹出编辑页面
		protected void sub<#= property.ShortTypeName #>GridView_RowCommand(object sender, GridViewCommandEventArgs e)
        {
			if (e.CommandName == "EditRow")
            {
                var id = Convert.ToInt32(e.CommandArgument);
				CurrentSub<#= property.ShortTypeName #>IdField.Value = id;
				popup<#= property.ShortTypeName #>FormView.ChangeMode(FormViewMode.Edit);
                this.ClientScript.RegisterStartupScript(this.GetType(), "showPopup<#= property.PropertyName #>", "showPopup<#= property.PropertyName #>();",true);
                popup<#= property.ShortTypeName #>FormView.DataBind();
				//TODO:popupEdit Modal
			}
        }
        //TODO:单击新增子表记录时触发弹出新增页面     
        protected void addSub<#= property.ShortTypeName #>Btn_Click(object sender, EventArgs e)
        {
            popup<#= property.ShortTypeName #>FormView.ChangeMode(FormViewMode.Insert);
            this.ClientScript.RegisterStartupScript(this.GetType(), "showPopup<#= property.PropertyName #>", "showPopup<#= property.PropertyName #>();",true);
        }
        //TODO:当子弹出表体新增或编辑Form绑定控件式触发，用于手动绑定控件或对制定的控件赋值
		protected void popup<#= property.ShortTypeName #>FormView_DataBound(object sender, EventArgs e)
        {
			throw new NotImplementedException();
        }
        //TODO:当弹出子表体编辑Form时，绑定当前编辑的数据
		public <#= property.ShortTypeName #> GetSub<#= property.ShortTypeName #>ById([System.Web.ModelBinding.Control("CurrentSub<#= property.ShortTypeName #>IdField")] object id)
		{
			throw new NotImplementedException();
		}
        //TODO:新增子表体数据，保存到数据库
		public void Create<#= property.ShortTypeName #>RowItem(<#= property.ShortTypeName #> item)
        {
			throw new NotImplementedException();
        }
        //TODO:更新子表体数据，保存到数据库
		public void Update<#= property.ShortTypeName #>RowItem(<#= property.ShortTypeName #> item)
        {
			throw new NotImplementedException();
        }
        //TODO:删除子表体数据，保存到数据库
		public  void Delete<#= property.ShortTypeName #>RowItem(object id)
        {
                throw new NotImplementedException();
        }
        //TODO:当子表体绑定数据时，载入MetaTable
        protected void sub<#= property.ShortTypeName #>GridView_DataBinding(object sender, EventArgs e)
        {
            var sub<#= property.ShortTypeName #>GridView =(GridView) sender;
            MetaTable metaTable = MetaTable.GetTable(typeof(<#=        property.TypeName #>));
            sub<#= property.ShortTypeName #>GridView.SetMetaTable(metaTable);
           
        }
		




 <#
                }
            }
            #>
        //TODO:当绑定数据时，载入MetaTable
        protected void <#=        ModelName #>FormView_DataBound(object sender, EventArgs e)
        {
            <#
            foreach (PropertyMetadata property in ModelMetadata.Properties) 
            {
                if ( property.AssociationDirection == AssociationDirection.OneToMany && OneToManyModels.ContainsKey(property.PropertyName))
                {
            #>
            var sub<#=        property.ShortTypeName #>GridView = (GridView)this.DepartmentFormView.FindControl("sub<#=        property.ShortTypeName #>GridView");
            if (sub<#=        property.ShortTypeName #>GridView != null)
            {
                MetaTable metaTable = MetaTable.GetTable(typeof(<#=        property.TypeName #>));
                sub<#=        property.ShortTypeName #>GridView.SetMetaTable(metaTable);
                sub<#=        property.ShortTypeName #>GridView.DataBind();
            }

            <#
                }
            }
            #>
            
        }
         
    }
}
