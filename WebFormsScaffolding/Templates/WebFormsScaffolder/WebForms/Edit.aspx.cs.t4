<#@ Template Language="C#" HostSpecific="True"  #>
<#@ Output Extension="cs" #>
<#@ include file="Imports.include.t4" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.ModelBinding;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data.Entity;
using Microsoft.AspNet.FriendlyUrls.ModelBinding;
using System.Web.DynamicData;
using <#=DefaultNamespace #>.Repositories;
using <#=DefaultNamespace #>.Extensions;
<# if(!string.IsNullOrEmpty(ModelNamespace)) { #>
using <#= ModelNamespace #>;
<# } #>
<# if(!string.IsNullOrEmpty(DbContextNamespace) && (DbContextNamespace != ModelNamespace)) { #>
using <#= DbContextNamespace #>;
<# } #>
namespace <#= FolderNamespace #>
{
    public partial class Edit : System.Web.UI.Page
    {
		protected <#= DbContextTypeName#> _db = new <#=DbContextTypeName#>();
        protected <#= ModelName #>Repository _<#= ModelName.ToLower() #>Repository = null;

        <#
		foreach (PropertyMetadata property in ModelMetadata.Properties) 
        {           
            if (property.AssociationDirection == AssociationDirection.OneToMany && property.RelatedModel.ShortTypeName != ModelName) 
            {               
        #>
        protected <#= property.RelatedModel.ShortTypeName #>Repository _<#= property.RelatedModel.ShortTypeName.ToLower() #>Repository = null;
        <#
            }
        }
        #> 

        protected void Page_Init()
        {
            //TODO:添加页面标题
            this.Title = "<#= ModelName #>";
            _<#= ModelName.ToLower() #>Repository = new <#= ModelName #>Repository(_db);
        <#
		foreach (PropertyMetadata property in ModelMetadata.Properties) { 
        if (property.AssociationDirection == AssociationDirection.OneToMany && property.RelatedModel.ShortTypeName != ModelName) {   
        #>
           _<#= property.RelatedModel.ShortTypeName.ToLower() #>Repository = new <#= property.RelatedModel.ShortTypeName #>Repository(_db);
        <#
            }
         }
        #>  
            <#= ModelName #>FormView.SetDataMethodsObject(_<#= ModelName.ToLower() #>Repository);
            <#= ModelName #>FormView.RedirectToRouteOnItemInserted("../Default");
            <#= ModelName #>FormView.RedirectToRouteOnItemUpdated("../Default");
            <#= ModelName #>FormView.RedirectToRouteOnItemDeleted("../Default");
            <#= ModelName #>FormView.RedirectToRouteOnItemCommad("../Default");
        }
        protected void Page_Load(object sender, EventArgs e)
        {
          
        }
        #region 主菜单操作事件
        //TODO:完成编辑GridView选中的记录
        protected void editbtn_Click(object sender, EventArgs e)
        {

        }
        //TODO:完成删除GridView选中的记录
        protected void deletebtn_Click(object sender, EventArgs e)
        {
            var id = Request.GetFriendlyUrlSegments()[0];
            _<#= ModelName.ToLower() #>Repository.Delete(id);
            _<#= ModelName.ToLower() #>Repository.SaveChanges();
        }
        //TODO:完成通过搜索关键字查询
        protected void searchbtn_Click(object sender, EventArgs e)
        {
            
        }
        #endregion
        #region 子表数据Load方法
        <#
		foreach (KeyValuePair<string,string > keyval in OneToManyNames) {     
        #>
       
        //TODO:根据外键获取<#= keyval.Key #>明细表数据
        public IQueryable<<#= keyval.Value #>> Get<#= keyval.Key #>By<#= ModelName #>Id(string sortByExpression, int maximumRows, int startRowIndex, out int totalRowCount, [FriendlyUrlSegmentsAttribute(0)]int? id)
        {
            if (id == null)
            {
                totalRowCount = 0;
                return null;
            }else
            {
                <#
                    ModelMetadata model=OneToManyModels[keyval.Key];
                    string _modelName="";
                    foreach (PropertyMetadata property in ModelMetadata.Properties) { 
                        if (property.AssociationDirection == AssociationDirection.OneToMany && property.RelatedModel.TypeName == keyval.Value) {
                            _modelName=property.RelatedModel.ShortTypeName;
                            break;
                        }
                    }
                    foreach (PropertyMetadata property in model.Properties) 
                    {                           
                        
                        if (property.AssociationDirection == AssociationDirection.ManyToOne && property.RelatedModel.ShortTypeName==ModelName) {
                #>
                //var id=Convert.ToInt32(id);
                var query=_<#= _modelName.ToLower() #>Repository.GetBy<#= property.RelatedModel.ForeignKeyPropertyNames[0].Replace("_","") #>(id); 
                totalRowCount=   query.Count();
                query = query
                    .OrderBy(n => n.Id)
                    .Skip(startRowIndex)
                    .Take(maximumRows);
                return query;
                <#
                        }
                    }
                #>
            }
                
        }
	

        <#
		}
        #>
        #endregion
        #region 子表GridView，FormView事件
		<#
            foreach (PropertyMetadata property in ModelMetadata.Properties) 
            {
                if ( property.AssociationDirection == AssociationDirection.OneToMany && OneToManyModels.ContainsKey(property.PropertyName))
                {
                    ModelMetadata metamodel = OneToManyModels[property.PropertyName];
                    var _foreignKeyPropertyName = GetForeignKeyPropertyName(metamodel , ModelName );
        #>
        #region sub<#= property.ShortTypeName #>GridView
        //TODO:当明细GridView单击命令行触发事件，如编辑当前行数据时弹出编辑页面
		protected void sub<#= property.ShortTypeName #>GridView_RowCommand(object sender, GridViewCommandEventArgs e)
        {
			if (e.CommandName == "EditRow")
            {
                var id = Convert.ToInt32(e.CommandArgument);
				CurrentSub<#= property.ShortTypeName #>IdField.Value = id.ToString();
				popup<#= property.ShortTypeName #>FormView.ChangeMode(FormViewMode.Edit);
                this.ClientScript.RegisterStartupScript(this.GetType(), "showPopup<#= property.PropertyName #>", "showPopup<#= property.PropertyName #>();",true);
                popup<#= property.ShortTypeName #>FormView.DataBind();
				//TODO:popupEdit Modal
			}
        }
        //TODO:单击新增子表记录时触发弹出新增页面     
        protected void addSub<#= property.ShortTypeName #>Btn_Click(object sender, EventArgs e)
        {
            popup<#= property.ShortTypeName #>FormView.ChangeMode(FormViewMode.Insert);
            //需要初始化外键值=主formview的ID
            var <#= PrimaryKeyName.ToLower() #> = <#= ModelName #>FormView.DataKey.Value.ToString();
            var sub<#= _foreignKeyPropertyName #>Control=(System.Web.UI.WebControls.HiddenField)popup<#= property.ShortTypeName #>FormView.FindDynamicFieldControl("<#= _foreignKeyPropertyName #>");
            
            //TODO:设定<#= property.ShortTypeName #>关联外键的初始化值
            if(sub<#= _foreignKeyPropertyName #>Control!=null){
                sub<#= _foreignKeyPropertyName #>Control.Value=  <#= PrimaryKeyName.ToLower() #>;
            }
            
            this.ClientScript.RegisterStartupScript(this.GetType(), "showPopup<#= property.PropertyName #>", "showPopup<#= property.PropertyName #>();",true);
        }
        //TODO:当formview发生数据变更时触发时间，一般用户刷新GridView
		protected void popup<#= property.ShortTypeName #>FormView_DataBound(object sender, EventArgs e)
        {
			
        }
        #region 弹出子窗体popup<#= property.ShortTypeName #>FormView 新增，修改查询
        //TODO:当弹出子表体编辑Form时，绑定当前编辑的数据
		public <#= property.ShortTypeName #> GetSub<#= property.ShortTypeName #>ById([System.Web.ModelBinding.Control("CurrentSub<#= property.ShortTypeName #>IdField")] int? id)
		{
			return _<#= property.RelatedModel.ShortTypeName.ToLower() #>Repository.GetById(id);
		}
        //TODO:新增子表体数据，保存到数据库
		public void Create<#= property.ShortTypeName #>RowItem(<#= property.ShortTypeName #> item)
        {
            //获取主formview绑定的数据
			//var <#= ModelName.ToLower() #> = this.<#= ModelName #>FormView.ExtractEntityValues(typeof(<#= ModelName #>));
            //获取主formview绑定Id
            //var <#= ModelName.ToLower() #>Id  = this.<#= ModelName #>FormView.DataKey.Value;
            //TODO:给子表附关联外键的值
            //item.<#= _foreignKeyPropertyName  #> = <#= ModelName.ToLower() #>Id;
            TryUpdateModel(item);
            if (!ModelState.IsValid)
            {
                //model is in an invalid state - stop all operations
                return;
            }else{
                _<#= property.RelatedModel.ShortTypeName.ToLower() #>Repository.Create(item);
                _<#= property.RelatedModel.ShortTypeName.ToLower() #>Repository.SaveChanges();
            }
        }
        //TODO:更新子表体数据，保存到数据库
		public void Update<#= property.ShortTypeName #>RowItem(<#= property.ShortTypeName #> item)
        {
			TryUpdateModel(item);
            if (!ModelState.IsValid)
            {
                //model is in an invalid state - stop all operations
                return;
            }else{
                _<#= property.RelatedModel.ShortTypeName.ToLower() #>Repository.Update(item);
                _<#= property.RelatedModel.ShortTypeName.ToLower() #>Repository.SaveChanges();
            }
        }
        //TODO:删除子表体数据，保存到数据库
		public  void Delete<#= property.ShortTypeName #>RowItem(object id)
        {
            
                _<#= property.RelatedModel.ShortTypeName.ToLower() #>Repository.Delete(id);
                _<#= property.RelatedModel.ShortTypeName.ToLower() #>Repository.SaveChanges();
            
        }
        #endregion
        /*
        //TODO:当子表需要绑定外键列数据时，需要每次载入MetaTable
        protected void sub<#= property.ShortTypeName #>GridView_DataBinding(object sender, EventArgs e)
        {
            var sub<#= property.ShortTypeName #>GridView =(GridView) sender;
            MetaTable metaTable = MetaTable.GetTable(typeof(<#=        property.TypeName #>));
            sub<#= property.ShortTypeName #>GridView.SetMetaTable(metaTable);
           
        }
        */
		#endregion




 <#
                }
            }
            #>
        #endregion
        //TODO:当绑定数据时，载入MetaTable
        protected void <#=        ModelName #>FormView_ItemCreated(object sender, EventArgs e)
        {
            <#
            foreach (PropertyMetadata property in ModelMetadata.Properties) 
            {
                if ( property.AssociationDirection == AssociationDirection.OneToMany && OneToManyModels.ContainsKey(property.PropertyName))
                {
            #>
            var sub<#=        property.ShortTypeName #>GridView = (GridView)this.<#=        ModelName #>FormView.FindControl("sub<#=        property.ShortTypeName #>GridView");
            if (sub<#=        property.ShortTypeName #>GridView != null)
            {
                //只有当gridview绑定外键字段列时需要
                //MetaTable metaTable = MetaTable.GetTable(typeof(<#=        property.TypeName #>));
                //sub<#=        property.ShortTypeName #>GridView.SetMetaTable(metaTable);
                //sub<#=        property.ShortTypeName #>GridView.DataBind();
            }

            <#
                }
            }
            #>
            
        }
         
    }
}



<#@ include file="ModelMetadataFunctions.cs.include.t4" #>