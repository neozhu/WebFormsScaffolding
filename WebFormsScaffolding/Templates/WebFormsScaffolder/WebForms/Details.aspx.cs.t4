<#@ Template Language="C#" HostSpecific="True"  #>
<#@ Output Extension="cs" #>
<#@ include file="Imports.include.t4" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.ModelBinding;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data.Entity;
using Microsoft.AspNet.FriendlyUrls.ModelBinding;
using Microsoft.AspNet.FriendlyUrls;
using System.Web.DynamicData;
using <#=DefaultNamespace #>.Repositories;
using <#=DefaultNamespace #>.Extensions;
<# if(!string.IsNullOrEmpty(ModelNamespace)) { #>
using <#= ModelNamespace #>;
<# } #>
<# if(!string.IsNullOrEmpty(DbContextNamespace) && (DbContextNamespace != ModelNamespace)) { #>
using <#= DbContextNamespace #>;
<# } #>

namespace <#= FolderNamespace #>
{
    public partial class Details : System.Web.UI.Page
    {
		 protected <#=DbContextTypeName #> _db = new <#=DbContextTypeName#>();
         protected <#= ModelName #>Repository _<#= ModelName.ToLower() #>Repository = null;

        <#
		foreach (PropertyMetadata property in ModelMetadata.Properties) 
        {           
            if (property.AssociationDirection == AssociationDirection.OneToMany && property.RelatedModel.ShortTypeName != ModelName) 
            {               
        #>
        protected <#= property.RelatedModel.ShortTypeName #>Repository _<#= property.RelatedModel.ShortTypeName.ToLower() #>Repository = null;
        <#
            }
        }
        #> 

        protected void Page_Init()
        {
            //TODO:添加页面标题
            this.Title = "<#= ModelName #>";
            _<#= ModelName.ToLower() #>Repository = new <#= ModelName #>Repository(_db);
        <#
		foreach (PropertyMetadata property in ModelMetadata.Properties) { 
        if (property.AssociationDirection == AssociationDirection.OneToMany && property.RelatedModel.ShortTypeName != ModelName) {   
        #>
           _<#= property.RelatedModel.ShortTypeName.ToLower() #>Repository = new <#= property.RelatedModel.ShortTypeName #>Repository(_db);
        <#
            }
         }
        #>  
            <#= ModelName #>FormView.SetDataMethodsObject(_<#= ModelName.ToLower() #>Repository);
            <#= ModelName #>FormView.RedirectToRouteOnItemInserted("../Default");
            <#= ModelName #>FormView.RedirectToRouteOnItemUpdated("../Default");
            <#= ModelName #>FormView.RedirectToRouteOnItemDeleted("../Default");
            <#= ModelName #>FormView.RedirectToRouteOnItemCommad("../Default");
        }
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {

            }
        }

        //TODO:完成编辑GridView选中的记录
        protected void editbtn_Click(object sender, EventArgs e)
        {
            var id = Request.GetFriendlyUrlSegments()[0];
            Response.Redirect("../Edit/" + id);
        }
        //TODO:完成删除GridView选中的记录
        protected void deletebtn_Click(object sender, EventArgs e)
        {
          var id = Request.GetFriendlyUrlSegments()[0];
            _<#= ModelName.ToLower() #>Repository.Delete(id);
            _<#= ModelName.ToLower() #>Repository.SaveChanges();
        }
        //TODO:完成通过搜索关键字查询
        protected void searchbtn_Click(object sender, EventArgs e)
        {
            
        }

        <#
    foreach (KeyValuePair<string,string > keyval in OneToManyNames) {     
        #>
        //TODO:根据外键获取<#= keyval.Key #>明细表数据
        public IQueryable<<#= keyval.Value #>> Get<#= keyval.Key #>By<#= ModelName #>Id(string sortByExpression, int maximumRows, int startRowIndex, out int totalRowCount, [FriendlyUrlSegmentsAttribute(0)]int? id)
        {
            if (id == null)
            {
                totalRowCount = 0;
                return null;
            }else
            {
                <#
                    ModelMetadata model=OneToManyModels[keyval.Key];
                    string _modelName="";
                    foreach (PropertyMetadata property in ModelMetadata.Properties) { 
                        if (property.AssociationDirection == AssociationDirection.OneToMany && property.RelatedModel.TypeName == keyval.Value) {
                            _modelName=property.RelatedModel.ShortTypeName;
                            break;
                        }
                    }
                    foreach (PropertyMetadata property in model.Properties) 
                    {                           
                        
                        if (property.AssociationDirection == AssociationDirection.ManyToOne && property.RelatedModel.ShortTypeName==ModelName) {
                #>
                //var id=Convert.ToInt32(id);
                var query=_<#= _modelName.ToLower() #>Repository.GetBy<#= property.RelatedModel.ForeignKeyPropertyNames[0].Replace("_","") #>((int)id); 
                totalRowCount=   query.Count();
                query = query
                    .OrderBy(n => n.Id)
                    .Skip(startRowIndex)
                    .Take(maximumRows);
                return query;
                <#
                        }
                    }
                #>
            }
                
        }
        <#
        }
        #>
        //TODO:当绑定数据时，载入MetaTable
        protected void <#=        ModelName #>FormView_DataBound(object sender, EventArgs e)
        {
            <#
            foreach (PropertyMetadata property in ModelMetadata.Properties) 
            {
                if ( property.AssociationDirection == AssociationDirection.OneToMany && OneToManyModels.ContainsKey(property.PropertyName))
                {
            #>
            var sub<#=        property.ShortTypeName #>GridView = (GridView)this.<#=        ModelName #>FormView.FindControl("sub<#=        property.ShortTypeName #>GridView");
            if (sub<#=        property.ShortTypeName #>GridView != null)
            {
                //MetaTable metaTable = MetaTable.GetTable(typeof(<#=        property.TypeName #>));
                //sub<#=        property.ShortTypeName #>GridView.SetMetaTable(metaTable);
                //sub<#=        property.ShortTypeName #>GridView.DataBind();
            }

            <#
                }
            }
            #>
            
        }
    }
}

<#@ include file="ModelMetadataFunctions.cs.include.t4" #>
