<#@ Template Language="C#" HostSpecific="True"  #>
<#@ Output Extension="cs" #>
<#@ include file="Imports.include.t4" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.ModelBinding;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data.Entity;
using Microsoft.AspNet.FriendlyUrls.ModelBinding;
using Microsoft.AspNet.FriendlyUrls;
using System.Web.DynamicData;
using <#=DefaultNamespace #>.Repositories;
using <#=DefaultNamespace #>.Extensions;
using Repository.Pattern.UnitOfWork;
using <#=DefaultNamespace #>.Services;
using Microsoft.Practices.Unity;

<# if(!string.IsNullOrEmpty(ModelNamespace)) { #>
using <#= ModelNamespace #>;
<# } #>
<# if(!string.IsNullOrEmpty(DbContextNamespace) && (DbContextNamespace != ModelNamespace)) { #>
using <#= DbContextNamespace #>;
<# } #>
<# PropertyMetadata primaryKey = ModelMetadata.PrimaryKeys.FirstOrDefault(); #>
namespace <#= FolderNamespace #>
{
    public partial class Details : System.Web.UI.Page
    {
		[Dependency]
        protected IUnitOfWorkAsync _unitofwork { get; set; }
        [Dependency]
        protected I<#= ModelName #>Service _<#= ModelName.ToLower() #>Service { get; set; }
        protected MetaTable _<#= ModelName.ToLower() #>MetaTable = MetaTable.GetTable(typeof(<#= ModelName #>));   
        <#
		foreach (PropertyMetadata property in ModelMetadata.Properties) 
        {           
            if (property.AssociationDirection == AssociationDirection.OneToMany && property.RelatedModel.ShortTypeName != ModelName) 
            {               
        #>
        protected MetaTable _<#= property.RelatedModel.ShortTypeName.ToLower() #>MetaTable = MetaTable.GetTable(typeof(<#= property.RelatedModel.ShortTypeName #>)); 
        <#
            }
        }
        #> 

        protected void Page_Init()
        {
            //TODO:添加页面标题
            this.Title = "<#= PluralizedModelName #>";
           
            <#= ModelName #>FormView.RedirectToRouteOnItemInserted("../Default");
            <#= ModelName #>FormView.RedirectToRouteOnItemUpdated("../Default");
            <#= ModelName #>FormView.RedirectToRouteOnItemDeleted("../Default");
            <#= ModelName #>FormView.RedirectToRouteOnItemCommad("../Default");
        }
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {

            }
        }

        //TODO:完成编辑GridView选中的记录
        protected void editbtn_Click(object sender, EventArgs e)
        {
            var id = Request.GetFriendlyUrlSegments()[0];
            Response.Redirect("../Edit/" + id);
        }
        //TODO:完成删除GridView选中的记录
        protected void deletebtn_Click(object sender, EventArgs e)
        {
            var id = Request.GetFriendlyUrlSegments()[0];
            _<#= ModelName.ToLower() #>Service.Delete(id);
            _unitofwork.SaveChanges();
            Response.Redirect("../Default");
        }
        //TODO:完成通过搜索关键字查询
        protected void searchbtn_Click(object sender, EventArgs e)
        {
            
        }
        public <#=  ModelName #> Get<#=  ModelName #>ById([FriendlyUrlSegmentsAttribute(0)]<#= primaryKey.ShortTypeName #> id)
        {
            return _<#= ModelName.ToLower() #>Service.Find(id);
        }
        #region tabs GridView Load明细表数据
         <#
		foreach (PropertyMetadata property in ModelMetadata.Properties) 
        {     
          
            if (property.AssociationDirection == AssociationDirection.OneToMany  ) 
            {
                    
                   PropertyMetadata subprimaryKey = OneToManyModels[property.PropertyName].PrimaryKeys.FirstOrDefault();
        #>
        //TODO:根据外键获取<#= property.PropertyName #>明细表数据
        public IQueryable<<#= property.RelatedModel.ShortTypeName #>>   Get<#= property.PropertyName #>By<#= ModelName #>Id(string sortByExpression, int maximumRows, int startRowIndex, out int totalRowCount, [FriendlyUrlSegmentsAttribute(0)]<#= primaryKey.ShortTypeName #> id)
        {
            sortByExpression=string.IsNullOrEmpty(sortByExpression)==true?"<#=  subprimaryKey.PropertyName #>":sortByExpression;
            var query = _<#= ModelName.ToLower() #>Service.Get<#= property.PropertyName #>(id).AsQueryable().OrderByField(sortByExpression);
            totalRowCount = query.Count();
            query = query
                    .Skip(startRowIndex)
                    .Take(maximumRows);
            return query;
        }
        <#
            }
        }
        #> 
        #endregion
      
        
    }
}

<#@ include file="ModelMetadataFunctions.cs.include.t4" #>
