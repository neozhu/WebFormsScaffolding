
<#@ Template Language="C#" HostSpecific="True"  #>
<#@ Output Extension="cs" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ parameter type="System.String" name="DefaultNamespace" #>
<#@ parameter type="System.String" name="ModelNamespace" #>
<#@ parameter type="System.String" name="FolderNamespace" #>
<#@ parameter type="System.String" name="ModelName" #>
<#@ parameter type="System.String" name="PluralizedModelName" #>                    
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata" name="ModelMetadata" #>
<#@ parameter type="System.String" name="PrimaryKeyName" #>      
<#@ parameter type="System.Collections.Generic.Dictionary<string, Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata>" name="OneToManyModels" #>
<#@ parameter type="System.Collections.Generic.Dictionary<string, string>" name="OneToManyNames" #>
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Linq.Expressions;
using Microsoft.AspNet.FriendlyUrls.ModelBinding;
using Repository.Pattern.Repositories;
using <#= DefaultNamespace #>.Extensions;
using <#= ModelNamespace #>;

namespace <#=DefaultNamespace #>.Repositories
{
  public static class <#= ModelName #>Repository  
    {
 
        <# 
        foreach (PropertyMetadata property in ModelMetadata.Properties) { 
            if (property.IsForeignKey) {

        #>
         public static IEnumerable<<#= ModelName #>> GetBy<#= property.PropertyName.Replace("_","") #>(this IRepositoryAsync<<#= ModelName #>> repository, int <#= property.PropertyName.Replace("_","").ToLower() #>)
         {
             var query= repository
                .Queryable()
                .Where(x => x.<#= property.PropertyName #>==<#= property.PropertyName.Replace("_","").ToLower() #>);
             return query;

         }
             
        <#
          }
        }
        #>

        <#
		foreach (PropertyMetadata property in ModelMetadata.Properties) 
        {           
            if (property.AssociationDirection == AssociationDirection.OneToMany ) 
            {               
        #>
        public static IEnumerable<<#= property.RelatedModel.ShortTypeName #>>   Get<#= property.PropertyName #> (this IRepositoryAsync<<#= ModelName #>> repository,int <#= PrimaryKeyName.ToLower() #>)
        {
            return repository.Query(n => n.<#= PrimaryKeyName #> == <#= PrimaryKeyName.ToLower() #>).Include(x => x.<#= property.PropertyName #>).Select(x => x.<#= property.PropertyName #>).FirstOrDefault();
        }
        <#
            }
        }
        #> 
	}
}



