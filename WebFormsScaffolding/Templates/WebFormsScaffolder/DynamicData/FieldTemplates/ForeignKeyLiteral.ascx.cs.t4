<#@ Template Language="C#" HostSpecific="True"  #>
<#@ Output Extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="System.String" name="DefaultNamespace" #>
using System;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Web.DynamicData;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using Microsoft.AspNet.FriendlyUrls;
namespace <#= DefaultNamespace #> {
    public partial class ForeignKeyField : System.Web.DynamicData.FieldTemplateUserControl {
        protected void Page_Init(object sender, EventArgs e)
        {

            Label1.Text = GetColumnDisplayName();
        }
        private string GetColumnDisplayName(){
            if (string.IsNullOrEmpty(this.ParentColumnName))
            {
                return Column.DisplayName;
            }
            else
            {
                foreach (var col in ForeignKeyColumn.ParentTable.Columns)
                {
                    if (col.Name == ParentColumnName)
                    {
                        return col.DisplayName;
                    }
                }
                return Column.DisplayName;
            }
        }

        private bool _allowNavigation = true;
        private string _navigateUrl = "#";
        public string NavigateUrl {
            get { return _navigateUrl; }
            set { _navigateUrl = value; }
        }
    
        public bool AllowNavigation {
            get {
                return _allowNavigation;
            }
            set {
                _allowNavigation = value;
            }
        }

        public string ParentColumnName { get; set; }
    
        protected string GetDisplayString() {
            object value = FieldValue;
            
            if (value == null) {
                return FormatFieldValue(ForeignKeyColumn.GetForeignKeyString(Row));
            } else {
                if (string.IsNullOrEmpty(this.ParentColumnName))
                {
                    return FormatFieldValue(ForeignKeyColumn.ParentTable.GetDisplayString(value));
                }
                else
                {
                    return GetObjectPropertyValue(value, ParentColumnName).ToString();
                }
            }
        }

        private object GetObjectPropertyValue(Object FrameObject, string PropertyString)
        {
            object Result = FrameObject;

            string[] Properties = PropertyString.Split('.');

            foreach (var Property in Properties)
            {
                Result = Result.GetType().GetProperty(Property).GetValue(Result, null);
            }

            return Result;
        }

        private int _cols;

        public int Cols
        {
            get
            {
                if (_cols == 0)
                    _cols = 2;
                return _cols;
            }
            set { _cols = value; }
        }

        private string _size;

        public string Size
        {
            get
            {
                return _size;
            }
            set { _size = value; }
        }

        // show bootstrap has-error
        protected void Page_PreRender(object sender, EventArgs e)
        {
            // if validation error then apply bootstrap has-error CSS class
            var isValid = this.Page.ModelState.IsValidField(Column.Name);
            int col = (12 / Cols);
            if (string.IsNullOrEmpty(Size) || (Size.ToLower() != "sm" && Size.ToLower() != "lg"))
            {
                Div1.Attributes["class"] = isValid ? string.Format("form-group  col-lg-{0} col-md-{0} col-sm-{0}", col) : string.Format("form-group  col-lg-{0} col-md-{0} col-sm-{0} has-error", col);
            }
            else
            {
                Div1.Attributes["class"] = isValid ? string.Format("form-group form-group-{1}  col-lg-{0} col-md-{0} col-sm-{0}", col, Size.ToLower()) : string.Format("form-group form-group-{1}   col-lg-{0} col-md-{0} col-sm-{0} has-error", col, Size.ToLower());
            }

        }
        
    
        public override Control DataControl {
            get {
                return this.Literal1;
            }
        }
    
    }
}
